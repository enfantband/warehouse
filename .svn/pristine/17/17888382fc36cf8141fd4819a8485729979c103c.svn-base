package com.samsbeauty.warehouse.role;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.samsbeauty.api.common.exception.WrongParameterException;
import com.samsbeauty.warehouse.exception.rest.DuplicatePrivilegeToRoleException;
import com.samsbeauty.warehouse.exception.rest.PrivilegeNotFoundException;
import com.samsbeauty.warehouse.role.model.Privilege;
import com.samsbeauty.warehouse.role.model.Role;
import com.samsbeauty.warehouse.role.service.PrivilegeService;
import com.samsbeauty.warehouse.role.service.RoleService;

@RestController
@RequestMapping("/api/privilege")
public class PrivilegeController {

	@Autowired
	private PrivilegeService privilegeService;
	
	@Autowired
	private RoleService roleService;

	@Value("${page.default.num}")
	protected Integer DEFAULT_NUM_PER_PAGE;

	// Retrieve All Resources
	@RequestMapping(method=RequestMethod.GET)
	ResponseEntity<List<Privilege>> getAll() throws WrongParameterException {
		List<Privilege> privilegeList = privilegeService.getAll();
		return new ResponseEntity<List<Privilege>>(privilegeList, HttpStatus.OK);
	}

	@RequestMapping(method=RequestMethod.POST)
	Privilege add(@RequestBody @Valid final Privilege privilege) {
		Privilege newPrivilege = new Privilege(privilege.getPrivilege());
		//Implement here
		return privilegeService.save(newPrivilege);
	}

	@RequestMapping(method=RequestMethod.PUT)
	Privilege update(@RequestBody @Valid final Privilege privilege) {
		Privilege updatePrivilege = privilegeService.getOne(privilege.getPrivilegeId());
		updatePrivilege.update(privilege.getPrivilege());
		return privilegeService.save(updatePrivilege);
	}
	
	@RequestMapping(method=RequestMethod.POST, value="/{privilegeId}/role/{roleId}")
	Privilege addPrivilege(@PathVariable Long privilegeId, @PathVariable Long roleId) throws DuplicatePrivilegeToRoleException {
		Role role = roleService.getOne(roleId);
		Privilege privilege = privilegeService.getOne(privilegeId);
		if(role.hasPrivilege(privilege)) {
			throw new DuplicatePrivilegeToRoleException("Role already has the privilege [" + privilege.getPrivilege() + "]");
		}
		role.getPrivileges().add(privilege);
		roleService.save(role);
		return privilege;
	}
	
	@RequestMapping(method=RequestMethod.DELETE, value="/{privilegeId}/role/{roleId}")
	Privilege removePrivilegeFromRole(@PathVariable Long privilegeId, @PathVariable Long roleId) throws PrivilegeNotFoundException {
		Role role = roleService.getOne(roleId);
		Privilege privilege = privilegeService.getOne(privilegeId);
		if(!role.hasPrivilege(privilege)) {
			throw new PrivilegeNotFoundException("Role does not have the privilege [" + privilege.getPrivilege() + "]");
		}
		role.getPrivileges().remove(privilege);
		roleService.save(role);
		return privilege;
	}


	@RequestMapping(method=RequestMethod.DELETE, value="/{privilegeId}")
	Privilege delete(@PathVariable Long privilegeId) {
		Privilege deletePrivilege = privilegeService.getOne(privilegeId);
		
		return  privilegeService.save(deletePrivilege.deactivate());
	}

	@RequestMapping(method=RequestMethod.DELETE, value="/ids/{privilegeIds}")
	ResponseEntity<List<Privilege>> deleteByIds(@PathVariable String privilegeIds) {
		List<String> ids = Arrays.asList(privilegeIds.split(","));
		List<Privilege> deletedList = new ArrayList<>();
		for(String id : ids) {
			Long employeeId = Long.valueOf(id);
			Privilege privilege = privilegeService.getOne(employeeId);
			privilege.deactivate();
			deletedList.add(privilege);
			privilegeService.save(privilege);			
		}
		return new ResponseEntity<List<Privilege>>(deletedList, HttpStatus.OK);
	}
}