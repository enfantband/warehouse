package com.samsbeauty.warehouse.picking;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.samsbeauty.api.common.exception.WrongParameterException;
import com.samsbeauty.old.model.Company;
import com.samsbeauty.warehouse.menu.model.Menu;
import com.samsbeauty.warehouse.old.helper.CompanyRestHelper;
import com.samsbeauty.warehouse.picking.exception.CompanyExistingInPickingGroupException;
import com.samsbeauty.warehouse.picking.model.PickingGroup;
import com.samsbeauty.warehouse.picking.model.PickingGroupCompany;
import com.samsbeauty.warehouse.picking.service.PickingGroupCompanyService;
import com.samsbeauty.warehouse.picking.service.PickingGroupService;


@RestController
@RequestMapping("/api/picking/group")
public class PickingGroupController {
	@Autowired
	private PickingGroupService pickingGroupService;

	@Value("${page.default.num}")
	protected Integer DEFAULT_NUM_PER_PAGE;
	
	@Autowired
	private CompanyRestHelper companyRestHelper;
	
	@Autowired
	private PickingGroupCompanyService pickingGroupCompanyService;

	// Retrieve All Resources
	@RequestMapping(method=RequestMethod.GET)
	ResponseEntity<List<PickingGroup>> getAll() throws WrongParameterException{
		List<PickingGroup> pickingGroupList = pickingGroupService.getAll();
		return new ResponseEntity<>(pickingGroupList, HttpStatus.OK);
	}

	@RequestMapping(method=RequestMethod.POST)
	PickingGroup add(@RequestBody @Valid final PickingGroup pickingGroup) {
		PickingGroup newPickingGroup = PickingGroup.builder()
				.setName(pickingGroup.getName())
				.setDescription(pickingGroup.getDescription())
				.setProductType(pickingGroup.getProductType())
				.setFilterOrder(pickingGroup.getFilterOrder())
				.createPickingGroup();
		//Implement here
		return pickingGroupService.save(newPickingGroup);
	}

	@RequestMapping(method=RequestMethod.PUT)
	PickingGroup update(@RequestBody @Valid final PickingGroup pickingGroup) {
		PickingGroup updatePickingGroup = pickingGroupService.getOne(pickingGroup.getPickingGroupId());
		updatePickingGroup.update(pickingGroup.getName(), pickingGroup.getDescription(), pickingGroup.getProductType(), pickingGroup.getFilterOrder());		
		return pickingGroupService.save(updatePickingGroup);
	}

	@RequestMapping(method=RequestMethod.DELETE, value="/{pickingGroupId}")
	PickingGroup delete(@PathVariable Long pickingGroupId) {
		PickingGroup deletePickingGroup = pickingGroupService.getOne(pickingGroupId);
		pickingGroupService.delete(pickingGroupId);
		return  deletePickingGroup;
	}
	@RequestMapping(method=RequestMethod.DELETE, value="/ids/{pickingGroupIds}")
	ResponseEntity<List<PickingGroup>> deleteByIds(@PathVariable String pickingGroupIds) {
		List<String> ids = Arrays.asList(pickingGroupIds.split(","));
		List<PickingGroup> deletedList = new ArrayList<>();
		for(String id : ids) {
			Long pickingGroupId = Long.valueOf(id);
			PickingGroup deletedGroup = pickingGroupService.getOne(pickingGroupId);
			pickingGroupService.delete(deletedGroup.getPickingGroupId());
			
		}
		return new ResponseEntity<List<PickingGroup>> (deletedList, HttpStatus.OK);
	}
	
	@RequestMapping(method=RequestMethod.POST, value="/{pickingGroupId}/company/{companyCode}")
	PickingGroupCompany addCompany(@PathVariable Long pickingGroupId, @PathVariable String companyCode) throws CompanyExistingInPickingGroupException {
		
		if(pickingGroupCompanyService.existsByCompanyCodeAndPickingGroupId(companyCode, pickingGroupId)) {
			throw new CompanyExistingInPickingGroupException("Company already exists in the picking group");
		}
		PickingGroup pickingGroup = pickingGroupService.getOne(pickingGroupId);
		PickingGroupCompany pickingGroupCompany = new PickingGroupCompany(companyCode, pickingGroup);
		return pickingGroupCompanyService.save(pickingGroupCompany);
	}
	
	@RequestMapping(method=RequestMethod.DELETE, value="/{pickingGroupId}/company/{companyCode}")
	PickingGroupCompany removeCompany(@PathVariable Long pickingGroupId, @PathVariable String companyCode) {
		PickingGroup pickingGroup = pickingGroupService.getOne(pickingGroupId);
		PickingGroupCompany pickingGroupCompany = pickingGroupCompanyService.getOneByCompanyCodeAndPickingGroupId(companyCode, pickingGroup.getPickingGroupId());
		pickingGroupCompanyService.delete(pickingGroupCompany.getPickingGropuCompanyId());
		return pickingGroupCompany;
	}

	@RequestMapping(method=RequestMethod.GET, value="/companyList")
	ResponseEntity<Page<Company>> companyList() {
		Page<Company> page = new PageImpl<Company>(companyRestHelper.getList(), new PageRequest(1, companyRestHelper.getList().size()), companyRestHelper.getList().size());
		
		return new ResponseEntity<Page<Company>>( page, HttpStatus.OK);
	}
}